import asyncio
import logging
from typing import Dict, List

from telegram import Bot
from telegram.error import TelegramError

logger = logging.getLogger(__name__)


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""

    def __init__(self, bot_token: str, channel_id: str):
        self.bot = Bot(token=bot_token)
        self.channel_id = channel_id

    async def send_message(self, message: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {self.channel_id}")
            logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {message[:200]}...")

            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode=parse_mode,
                disable_web_page_preview=False,
            )
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
            return True

        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback

            logger.error(f"Traceback: {traceback.format_exc()}")
            return False

    async def send_multiple_messages(self, messages: List[str]) -> int:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª"""
        success_count = 0

        for message in messages:
            if await self.send_message(message):
                success_count += 1
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                await asyncio.sleep(1)

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return success_count

    async def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API"""
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...")
            me = await self.bot.get_me()
            logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É {self.channel_id}...")
            try:
                chat = await self.bot.get_chat(self.channel_id)
                logger.info(f"–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É: {chat.title}")
                return True
            except TelegramError as e:
                logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {self.channel_id}: {e}")
                return False

        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            import traceback

            logger.error(f"Traceback: {traceback.format_exc()}")
            return False

    def format_entry_for_telegram(self, entry: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        import html
        import re

        # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è –æ—Ç HTML
        title = html.unescape(entry["title"])
        title = re.sub(r"<[^>]+>", "", title).strip()

        # –ó–∞–º–µ–Ω—è–µ–º –¥–æ–º–µ–Ω .org –Ω–∞ .gay –≤ —Å—Å—ã–ª–∫–µ
        link = entry["link"].replace("archiveofourown.org", "archiveofourown.gay")

        author = html.unescape(entry["author"])
        author = re.sub(r"<[^>]+>", "", author).strip()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        message = f"\n<a href='{link}'><b>‚ú®‚ú®‚ú®{title}‚ú®‚ú®‚ú®</b></a>\n"
        message += f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {author}\n"

        # –§–∞–Ω–¥–æ–º
        if entry.get("fandom"):
            message += f"üåç <b>–§–∞–Ω–¥–æ–º:</b> {entry['fandom']}\n"

        # –†–µ–π—Ç–∏–Ω–≥
        if entry.get("rating"):
            message += f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {entry['rating']}\n"

        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        if entry.get("category"):
            message += f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {entry['category']}\n"

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
        if entry.get("warnings") and entry["warnings"] != "No Archive Warnings Apply":
            message += f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b> {entry['warnings']}\n"

        # –ü–µ–π—Ä–∏–Ω–≥–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
        relationships = entry.get("relationships", "")
        characters = entry.get("characters", "")
        if relationships or characters:
            # –í—ã–¥–µ–ª—è–µ–º –ø–µ–π—Ä–∏–Ω–≥–∏ –∂–∏—Ä–Ω—ã–º
            if relationships:
                relationships = f"<b>{relationships}</b>"
            message += f"üíï <b>–ü–µ–π—Ä–∏–Ω–≥ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:</b> {relationships}, {characters}\n"

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        if entry.get("words"):
            message += f"üìù <b>–ö–æ–ª-–≤–æ —Å–ª–æ–≤:</b> {entry['words']}\n"

        # –¢–µ–≥–∏
        if entry.get("additional_tags"):
            message += f"üè∑Ô∏è <b>–¢—ç–≥–∏:</b> {entry['additional_tags']}\n"

        # –û–ø–∏—Å–∞–Ω–∏–µ
        if entry.get("summary"):
            message += f"üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {entry['summary']}"

        return message
